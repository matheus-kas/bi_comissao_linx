name: Testes Automatizados

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  # Permite executar o workflow manualmente a partir da aba Actions
  workflow_dispatch:

jobs:
  test:
    name: Verificação de Qualidade
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Configurar Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci
        
      - name: Verificar formatação de código
        run: npm run format:check || echo "Formatação não configurada, pulando"
        continue-on-error: true

      - name: Executar linting
        run: npm run lint || echo "Linting não configurado, pulando"
        continue-on-error: true

      - name: Verificar tipos TypeScript
        run: npm run typecheck || npx tsc --noEmit
        
      - name: Executar testes unitários
        run: npm test || echo "Testes não configurados, pulando"
        continue-on-error: true

      - name: Verificar build
        run: npm run build

  analyze:
    name: Análise de Código
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necessário para obter todo o histórico para algumas análises

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci
        
      - name: Analisar duplicação de código
        uses: platisd/clang-tidy-pr-comments@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clang_tidy_checks: '-*,performance-*,readability-*'
          include: '**/*.{ts,tsx}'
          exclude: '**/node_modules/**,**/.next/**'
        continue-on-error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
        if: env.SONAR_TOKEN != ''

  security:
    name: Verificação de Segurança
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci
        
      - name: Verificar vulnerabilidades em dependências
        run: npm audit --production
        continue-on-error: true

      - name: Executar CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript, typescript
        continue-on-error: true

  deploy-preview:
    name: Deploy de Preview (Vercel)
    runs-on: ubuntu-latest
    needs: [test, analyze, security]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci
        
      - name: Deploy para Vercel (Preview)
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
        continue-on-error: true
        if: env.VERCEL_TOKEN != ''